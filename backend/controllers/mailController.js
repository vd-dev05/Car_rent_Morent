import MailModel from "../models/MailModel.js";
import UserModel from "../models/UserModel.js";
import { io } from "../socket/socket.js";

const MailController = {
  //Api l·∫•y t·∫•t c·∫£ th∆∞, m·ªõi nh·∫•t tr∆∞·ªõc
  getAllMail: async (req, res) => {
    try {
      const data = await MailModel.find().sort({ createdAt: -1 });
      res.status(200).send({
        message: "T·∫•t c·∫£ th∆∞ trong database",
        data: data,
      });
    } catch (error) {
      res.status(500).send({
        message: error.message,
        data: null,
      });
    }
  },
  //Api g·ª≠i th∆∞
  sendMail: async (req, res) => {
    try {
      console.log("Request body:", req.body);
      const role = req.user.role;
      if (role === "ADMIN")
        throw new Error("Vui l√≤ng kh√¥ng s·ª≠ d·ª•ng t√†i kho·∫£n Admin ƒë·ªÉ g·ª≠i ƒë∆°n");
      // Ki·ªÉm tra request body c√≥ d·ªØ li·ªáu kh√¥ng
      if (!req.body || Object.keys(req.body).length === 0) {
        throw new Error("D·ªØ li·ªáu y√™u c·∫ßu kh√¥ng h·ª£p l·ªá.");
      }
      const { senderName, senderEmail, senderPhone, mailContent } = req.body;
      const { senderId, recipientId, carId } = req.query;
      if (
        !senderName?.trim() ||
        senderName === "null" ||
        !senderEmail?.trim() ||
        senderEmail === "null" ||
        !senderPhone?.trim() ||
        senderPhone === "null"
      ) {
        throw new Error("Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc");
      }
      const checkMailExist = await MailModel.findOne({ senderId, carId });
      if (checkMailExist) throw new Error("B·∫°n ƒë√£ h·ªèi v·ªÅ xe n√†y r·ªìi");
      if (senderId.toString() === recipientId.toString())
        throw new Error("B·∫°n kh√¥ng th·ªÉ g·ª≠i th∆∞ cho m√¨nh");
      const expiresAt = new Date();
      expiresAt.setDate(expiresAt.getDate() + 7); //H·∫°n c·ªßa th∆∞ (Ng√†y t·∫°o + 7 ng√†y)
      const allMailInclude = {
        senderName,
        senderEmail,
        senderPhone,
        mailContent,
        senderId,
        recipientId,
        carId,
        status: "ƒëang x·ª≠ l√Ω",
        expiresAt,
      };
      const newMail = await MailModel.create(allMailInclude);
      io.to(allMailInclude.recipientId.toString()).emit("sendMail", {
        message: `B·∫°n c√≥ 1 th∆∞ m·ªõi`,
      });
      res.status(200).send({
        message: "G·ª≠i th∆∞ li√™n h·ªá th√†nh c√¥ng",
        data: newMail,
      });
    } catch (error) {
      res.status(500).send({
        message: error.message,
        data: null,
      });
    }
  },
  //Api l·∫•y th∆∞ ƒë√£ g·ª≠i c·ªßa sender
  getSenderMail: async (req, res) => {
    try {
      const { limit, page } = req.query;
      const dataLimit = parseInt(limit) || 10;
      const pageNumber = parseInt(page) || 1;
      const skip = (pageNumber - 1) * dataLimit;
      const { userId } = req.query;
      const mails = await MailModel.find({ senderId: userId })
        .sort({ createdAt: -1 })
        .populate("recipientId  senderId")
        .populate("carId", "carName")
        .skip(skip)
        .limit(dataLimit);
      const totalMail = await MailModel.countDocuments({
        senderId: userId,
      });
      res.status(200).send({
        message: "ƒê√¢y l√† t·∫•t c·∫£ th∆∞ b·∫°n ƒë√£ g·ª≠i",
        data: mails,
        totalPages: Math.ceil(totalMail / dataLimit),
        currentPage: pageNumber,
      });
    } catch (error) {
      res.status(500).send({
        message: error.message,
        data: null,
      });
    }
  },
  //Api l·∫•y t·∫•t c·∫£ th∆∞ t·ª´ id ng∆∞·ªùi b√°n
  getProviderMail: async (req, res) => {
    try {
      const { limit, page } = req.query;
      const dataLimit = parseInt(limit) || 10;
      const pageNumber = parseInt(page) || 1;
      const skip = (pageNumber - 1) * dataLimit;
      const { providerId } = req.query;
      const mails = await MailModel.find({ recipientId: providerId })
        .sort({ createdAt: -1 })
        .populate("recipientId senderId")
        .populate("carId", "carName")
        .skip(skip)
        .limit(dataLimit);
      const totalMail = await MailModel.countDocuments({
        recipientId: providerId,
      });
      res.status(200).send({
        message: "ƒê√¢y l√† t·∫•t c·∫£ th∆∞ c·ªßa b·∫°n",
        data: mails,
        totalPages: Math.ceil(totalMail / dataLimit),
        currentPage: pageNumber,
      });
    } catch (error) {
      res.status(500).send({
        message: error.message,
        data: null,
      });
    }
  },
  //Api l·∫•y s·ªë l∆∞·ª£ng th∆∞ ch∆∞a ƒë·ªçc c·ªßa user (c√≥ role provider)
  getUnreadMailCount: async (req, res) => {
    try {
      const providerId = req.user.idUser;
      const provider = await UserModel.findById(providerId).select(
        "unreadMails"
      );
      res.status(200).send({
        message: `B·∫°n c√≥ ${provider.unreadMails} th∆∞ m·ªõi`,
        data: provider.unreadMails,
      });
    } catch (error) {
      res.status(500).send({
        message: error.message,
        data: null,
      });
    }
  },
  changeMailStatus: async (req, res) => {
    try {
      const { id } = req.params;
      const { status, reason } = req.body;
      const mail = await MailModel.findById(id);
      if (!mail) throw new Error("Th∆∞ kh√¥ng t·ªìn t·∫°i!");
      if (!["t·ª´ ch·ªëi", "ch·∫•p thu·∫≠n"].includes(status))
        throw new Error("Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá!");
      if (status === "t·ª´ ch·ªëi" && !reason)
        throw new Error("Vui l√≤ng nh·∫≠p l√≠ do t·ª´ ch·ªëi");
      const updatedMail = await MailModel.findByIdAndUpdate(
        id,
        {
          status,
          ...(mail.isRead ? {} : { isRead: true }), //ch·ªâ ch·ªânh n·∫øu isRead l√† false
          ...(reason && { reason }),
        },
        { new: true }
      ); //C√°ch vi·∫øt shorthand conditional object property: ...(reason && { reason }), tr√°nh tr∆∞·ªùng h·ª£p n·∫øu reason b·∫±ng null ho·∫∑c undifine s·∫Ω th√™m key reason l√† null
      io.to(updatedMail.senderId.toString()).emit("mailStatusChanged", {
        message: `Ng∆∞·ªùi b√°n ƒë√£ ${status} th∆∞ c·ªßa b·∫°n`,
        mailId: updatedMail._id,
        status,
      });

      // console.log(
      //   "üì° G·ª≠i s·ª± ki·ªán mailStatusChanged ƒë·∫øn:",
      //   updatedMail.senderId.toString()
      // );
      res.status(200).send({
        message: "C·∫≠p nh·∫≠t th∆∞ th√†nh c√¥ng",
        data: updatedMail,
      });
    } catch (error) {
      console.log(error);
      res.status(500).send({
        message: error.message,
        data: null,
      });
    }
  },
  readMail: async (req, res) => {
    try {
      const { id } = req.params;
      const mail = await MailModel.findById(id);
      if (!mail) return res.status(404).json({ message: "Th∆∞ kh√¥ng t·ªìn t·∫°i!" });
      if (mail.isRead) {
        return res.json({ message: "Th∆∞ ƒë√£ ƒë∆∞·ª£c ƒë·ªçc tr∆∞·ªõc ƒë√≥!", mail });
      }
      mail.isRead = true;
      mail.status = "ƒë√£ xem";
      await mail.save();
      return res.json({
        message: "ƒê√°nh d·∫•u th∆∞ l√† ƒë√£ ƒë·ªçc!",
      });
    } catch (error) {
      console.error(error);
      res.status(500).send({
        message: error.message,
        data: null,
      });
    }
  },
  //X√≥a ƒë∆°n ƒë·∫´ g·ª≠i c·ªßa sender
  deleteMail: async (req, res) => {
    try {
      const { id } = req.params;
      const mail = await MailModel.findById(id);
      if (!mail) return res.status(404).json({ message: "Th∆∞ kh√¥ng t·ªìn t·∫°i!" });

      const idUser = req.user._id;
      // console.log(idUser);
      // console.log(mail.senderId.toString());
      if (idUser !== mail.senderId.toString())
        throw new Error("B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi g·ª≠i ƒë∆°n n√†y!");

      await MailModel.findByIdAndDelete(id);
      return res.json({ message: "X√≥a ƒë∆°n th√†nh c√¥ng!", data: mail });
    } catch (error) {
      console.error(error);
      return res.status(500).json({ message: "L·ªói server!" });
    }
  },
};

export default MailController;

/*
A: web g·ª≠i ƒë∆°n
B: web tr·∫£ l·ªùi




*/
